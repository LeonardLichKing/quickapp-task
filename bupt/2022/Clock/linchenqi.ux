<template>
  <div class="clock">
    <canvas id="myclock" class="clock"></canvas> 
  </div>
</template>

<script>
import router from '@system.router'

export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  private: {

  },

  onInit() {
    this.$page.setTitleBar({ text: 'Clock-Demo' })
  },

  onShow() {
   setInterval(this.draw,50);
  },

  draw()
  {
    const canvas = document.getElementById('myclock');
    var ctx = canvas.getContext('2d'); 
    var width=300;
    var r=width/2;
    ctx.clearRect(0, 0, width, width)
    var now = new Date();
    var hour = now.getHours();
    var minute = now.getMinutes();
    var second = now.getSeconds();
    var millisecond = now.getMilliseconds();
    //console.log(hour,minute,second)

    //画表盘
    ctx.save();
    ctx.translate(r, r);
    ctx.beginPath();
    ctx.stroke();
    var hourNumbers = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2];
    var rem=width/200;
    ctx.font = '20px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    hourNumbers.forEach(function (number, i) {
      var rad = 2 * Math.PI / 12 * i;
      var x = Math.cos(rad) * (r - 40 * rem);
      var y = Math.sin(rad) * (r - 40 * rem);
      ctx.fillText(number, x, y);
    });
    for (var i = 0; i < 60; i++) {
      var rad = 2 * Math.PI / 60 * i;
      var x = Math.cos(rad) * (r - 18 * rem);
      var y = Math.sin(rad) * (r - 18 * rem);
      ctx.beginPath();
      if (i % 5 === 0) {
        ctx.lineWidth = 4 * rem;
        ctx.lineCap = "round";
        ctx.moveTo(x, y);
        ctx.lineTo(Math.cos(rad) * (r - 26 * rem), Math.sin(rad) * (r - 26 * rem));
        ctx.arc(x, y, 2 * rem, 0, 2 * Math.PI, false);
      } else {
        ctx.fillStyle = '#000';
        ctx.arc(x, y, 2 * rem, 0, 2 * Math.PI, false);
      }
      ctx.fill()
    }

    //画时针
    ctx.save(); 
    ctx.beginPath(); 
    var rad = 2 * Math.PI / 12 * hour; 
    var mrad = 2 * Math.PI / 12 / 60 * minute; 
    ctx.rotate(rad + mrad);
    ctx.lineWidth = 4 * rem; 
    ctx.lineCap = "round"; 
    ctx.moveTo(0, 10 * rem); 
    ctx.lineTo(0, -r / 2); 
    ctx.stroke(); //最终画出时针
    ctx.restore(); 


    //画分针
    ctx.save(); 
    ctx.beginPath(); 
    rad = 2 * Math.PI / 60 * minute ; 
    ctx.rotate(rad);
    ctx.lineWidth = 3 * rem; 
    ctx.moveTo(0, 10 * rem); 
    ctx.lineTo(0, -r + 40 * rem); 
    ctx.stroke(); //最终画出分针
    ctx.restore(); 


    //画毫秒针
    ctx.save(); 
    ctx.beginPath(); 
    rad = 2 * Math.PI / 60 * second ;
    var millis = 2 * Math.PI / 60 / 1000 * millisecond;
    ctx.rotate(rad+millis);
    ctx.moveTo(-2 * rem, 20 * rem); 
    ctx.lineTo(2 * rem, 20 * rem);
    ctx.lineTo(1, -r + 25 * rem); 
    ctx.lineTo(-1, -r + 18 * rem); 
    ctx.fill(); //最终画出毫秒针
    ctx.restore();

    // console.log(millisecond);
    ctx.restore();

  },
}
</script>

<style lang="less">
@import './../../assets/styles/style.less';
</style>
